package MaratonArtOfProgramingContest;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Scanner;

public class ILoveBigNumbers {
	
	static BigInteger factorial(int n)
	{
		BigInteger salida=BigInteger.ONE;
		for (int i = 2; i < n+1; i++) {
			salida=salida.multiply(BigInteger.valueOf(i));
		}
		return salida;
	}
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		
		//int testCases=sc.nextInt();
		ArrayList<Integer> cantidadDeDigitos=new ArrayList<Integer>(1);
		
		int [] tamannoDigitos={};
//		for (int casos = 0; casos < 1; casos++) {
//			BigInteger salida=BigInteger.ONE;
//			
//			for (int i = 1; i < 1001; i++) {
//				salida=salida.multiply(BigInteger.valueOf(i));
//				//System.out.println(salida.toString());
//				cantidadDeDigitos.add(salida.toString().length());
//			}
//			System.out.println(cantidadDeDigitos.toString());
//		}
		
		while (true) {
			System.out.println(tamannoDigitos[sc.nextInt()]);
		}
	}

}